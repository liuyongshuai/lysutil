// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: httpresp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_httpresp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_httpresp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_httpresp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_httpresp_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_httpresp_2eproto;
namespace lysutil {
namespace httpresp {
class getTopicListResp;
struct getTopicListRespDefaultTypeInternal;
extern getTopicListRespDefaultTypeInternal _getTopicListResp_default_instance_;
}  // namespace httpresp
}  // namespace lysutil
PROTOBUF_NAMESPACE_OPEN
template<> ::lysutil::httpresp::getTopicListResp* Arena::CreateMaybeMessage<::lysutil::httpresp::getTopicListResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lysutil {
namespace httpresp {

// ===================================================================

class getTopicListResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lysutil.httpresp.getTopicListResp) */ {
 public:
  inline getTopicListResp() : getTopicListResp(nullptr) {}
  ~getTopicListResp() override;
  explicit PROTOBUF_CONSTEXPR getTopicListResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getTopicListResp(const getTopicListResp& from);
  getTopicListResp(getTopicListResp&& from) noexcept
    : getTopicListResp() {
    *this = ::std::move(from);
  }

  inline getTopicListResp& operator=(const getTopicListResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline getTopicListResp& operator=(getTopicListResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getTopicListResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const getTopicListResp* internal_default_instance() {
    return reinterpret_cast<const getTopicListResp*>(
               &_getTopicListResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(getTopicListResp& a, getTopicListResp& b) {
    a.Swap(&b);
  }
  inline void Swap(getTopicListResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getTopicListResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getTopicListResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getTopicListResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getTopicListResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getTopicListResp& from) {
    getTopicListResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getTopicListResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lysutil.httpresp.getTopicListResp";
  }
  protected:
  explicit getTopicListResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicListFieldNumber = 3,
    kMsgFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // repeated string topic_list = 3;
  int topic_list_size() const;
  private:
  int _internal_topic_list_size() const;
  public:
  void clear_topic_list();
  const std::string& topic_list(int index) const;
  std::string* mutable_topic_list(int index);
  void set_topic_list(int index, const std::string& value);
  void set_topic_list(int index, std::string&& value);
  void set_topic_list(int index, const char* value);
  void set_topic_list(int index, const char* value, size_t size);
  std::string* add_topic_list();
  void add_topic_list(const std::string& value);
  void add_topic_list(std::string&& value);
  void add_topic_list(const char* value);
  void add_topic_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& topic_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_topic_list();
  private:
  const std::string& _internal_topic_list(int index) const;
  std::string* _internal_add_topic_list();
  public:

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // uint64 error = 1;
  void clear_error();
  uint64_t error() const;
  void set_error(uint64_t value);
  private:
  uint64_t _internal_error() const;
  void _internal_set_error(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:lysutil.httpresp.getTopicListResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> topic_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    uint64_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_httpresp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// getTopicListResp

// uint64 error = 1;
inline void getTopicListResp::clear_error() {
  _impl_.error_ = uint64_t{0u};
}
inline uint64_t getTopicListResp::_internal_error() const {
  return _impl_.error_;
}
inline uint64_t getTopicListResp::error() const {
  // @@protoc_insertion_point(field_get:lysutil.httpresp.getTopicListResp.error)
  return _internal_error();
}
inline void getTopicListResp::_internal_set_error(uint64_t value) {
  
  _impl_.error_ = value;
}
inline void getTopicListResp::set_error(uint64_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:lysutil.httpresp.getTopicListResp.error)
}

// string msg = 2;
inline void getTopicListResp::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& getTopicListResp::msg() const {
  // @@protoc_insertion_point(field_get:lysutil.httpresp.getTopicListResp.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getTopicListResp::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lysutil.httpresp.getTopicListResp.msg)
}
inline std::string* getTopicListResp::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:lysutil.httpresp.getTopicListResp.msg)
  return _s;
}
inline const std::string& getTopicListResp::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void getTopicListResp::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* getTopicListResp::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* getTopicListResp::release_msg() {
  // @@protoc_insertion_point(field_release:lysutil.httpresp.getTopicListResp.msg)
  return _impl_.msg_.Release();
}
inline void getTopicListResp::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lysutil.httpresp.getTopicListResp.msg)
}

// repeated string topic_list = 3;
inline int getTopicListResp::_internal_topic_list_size() const {
  return _impl_.topic_list_.size();
}
inline int getTopicListResp::topic_list_size() const {
  return _internal_topic_list_size();
}
inline void getTopicListResp::clear_topic_list() {
  _impl_.topic_list_.Clear();
}
inline std::string* getTopicListResp::add_topic_list() {
  std::string* _s = _internal_add_topic_list();
  // @@protoc_insertion_point(field_add_mutable:lysutil.httpresp.getTopicListResp.topic_list)
  return _s;
}
inline const std::string& getTopicListResp::_internal_topic_list(int index) const {
  return _impl_.topic_list_.Get(index);
}
inline const std::string& getTopicListResp::topic_list(int index) const {
  // @@protoc_insertion_point(field_get:lysutil.httpresp.getTopicListResp.topic_list)
  return _internal_topic_list(index);
}
inline std::string* getTopicListResp::mutable_topic_list(int index) {
  // @@protoc_insertion_point(field_mutable:lysutil.httpresp.getTopicListResp.topic_list)
  return _impl_.topic_list_.Mutable(index);
}
inline void getTopicListResp::set_topic_list(int index, const std::string& value) {
  _impl_.topic_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:lysutil.httpresp.getTopicListResp.topic_list)
}
inline void getTopicListResp::set_topic_list(int index, std::string&& value) {
  _impl_.topic_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:lysutil.httpresp.getTopicListResp.topic_list)
}
inline void getTopicListResp::set_topic_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.topic_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lysutil.httpresp.getTopicListResp.topic_list)
}
inline void getTopicListResp::set_topic_list(int index, const char* value, size_t size) {
  _impl_.topic_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lysutil.httpresp.getTopicListResp.topic_list)
}
inline std::string* getTopicListResp::_internal_add_topic_list() {
  return _impl_.topic_list_.Add();
}
inline void getTopicListResp::add_topic_list(const std::string& value) {
  _impl_.topic_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lysutil.httpresp.getTopicListResp.topic_list)
}
inline void getTopicListResp::add_topic_list(std::string&& value) {
  _impl_.topic_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lysutil.httpresp.getTopicListResp.topic_list)
}
inline void getTopicListResp::add_topic_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.topic_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lysutil.httpresp.getTopicListResp.topic_list)
}
inline void getTopicListResp::add_topic_list(const char* value, size_t size) {
  _impl_.topic_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lysutil.httpresp.getTopicListResp.topic_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
getTopicListResp::topic_list() const {
  // @@protoc_insertion_point(field_list:lysutil.httpresp.getTopicListResp.topic_list)
  return _impl_.topic_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
getTopicListResp::mutable_topic_list() {
  // @@protoc_insertion_point(field_mutable_list:lysutil.httpresp.getTopicListResp.topic_list)
  return &_impl_.topic_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace httpresp
}  // namespace lysutil

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_httpresp_2eproto
